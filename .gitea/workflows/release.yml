name: Release Workflow
on:
  workflow_dispatch:
    inputs:
      type:
        description: "Release Type"
        required: true
        type: choice
        options:
          - Patch
          - Minor
          - Major
      npm_publish:
        description: "Publish to NPM Registry"
        required: false
        default: true
        type: boolean
      gitea_publish:
        description: "Publish to Gitea Registry"
        required: false
        default: true
        type: boolean

env:
  module: console
  ref: refs/heads/development
jobs:
  Validation:
    runs-on: ubuntu-latest
    container:
      image: node:latest
    steps:
      - name: Checkout
        uses: tiagomta/checkout@v1
        with:
          repository: vistta/workspace
          ref: main
          token: ${{ secrets.TOKEN }}
          fetch-depth: 0
          submodules: true
      - name: Setup Node
        run: npm ci
      - name: Module Validation
        working-directory: ./packages/${{ env.module }}
        run: npx vistta project outdated
      - name: Eslint Validation
        working-directory: ./packages/${{ env.module }}
        run: npx eslint .
      - name: Typescript Validation
        working-directory: ./packages/${{ env.module }}
        run: npx tsc
      - name: Unit Tests
        working-directory: ./packages/${{ env.module }}
        run: npx vistta test

  Release:
    needs: Validation
    runs-on: ubuntu-latest
    container:
      image: node:latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/development'
    steps:
      - name: Checkout
        uses: tiagomta/checkout@v1
        with:
          ref: ${{ env.ref }}
          token: ${{ secrets.TOKEN }}
      - name: Gitea Release
        uses: tiagomta/nodejs-run@v1
        with:
          target: inline
          run: |
            const version = (`v1.0.0`);
            const milestone = await gitea.milestones.create("${{ inputs.type }} (" + version + ")");
            const issues = await gitea.issues.list({ state: "closed" });
            const types = {};
            for (let issue of issues) {
              const type =
                issue.labels.find((l) => l.name.startsWith("Project/"))?.name.slice(8) +
                "s";
              if (type && issue.milestone == milestone.id) {
                if (!types[type]) types[type] = `## ${type}\n`;
                types[type] += `- ${issue.title} (#${issue.number})\n`;
              } else if (issue.milestone == null) {
                await gitea.issues.update(issue.number, { milestone: milestone.id });
                if (type) {
                  if (!types[type]) types[type] = `## ${type}\n`;
                  types[type] += `- ${issue.title} (#${issue.number})\n`;
                }
              }
            }
            console.log("here");
            await gitea.releases.create({
              tag_name: version,
              name: "${{ inputs.type }} (" + version + ")",
              body: Object.values(types).join("\n")
            });
            await gitea.milestones.close(milestone.id);
